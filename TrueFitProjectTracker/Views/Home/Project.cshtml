@model TrueFitProjectTracker.ViewModels.ProjectViewModel

@{
	int counter = 0;
	DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc); // Unix epoch
	TrueFitProjectTracker.Factories.Dashboard.TasksFactory tasks = ViewBag.Tasks;
	ViewBag.Title = @Model.Title;
}

@section breadcrumb {
    <li>
        <a href="#">@Model.Title</a>
    </li>
}

@section headerSection {
    <div class="header-progress row">
        <div class="col-md-8 col-md-offset-2">
            <h2>@Model.Title</h2>

            <div class="progress">
                <div class="progress-bar progress-bar-info" aria-valuemax="100" aria-valuemin="0" aria-valuenow="@Model.ProjectCompletion" role="progressbar" style="width: @Model.ProjectCompletion%">
                    <span>@Model.ProjectCompletion%</span>
                </div>
            </div>
        </div>
    </div>
}

@section Styles {
    @Styles.Render("~/Content/Project.css")
}

<section class="container">
    <section class="center content no-border row">
        <div class="col-md-12">
            <article class="tasks">
                <div class="jumbotron">
                    <h2>Our to-do list</h2>
                    <div class="col-md-8">
                        <div id="task-burndown" class="burndown"></div>
                    </div>
                    <div class="col-md-4">
                        <div id="task-progress" class="item-progress"></div>
                    </div>
                    <div class="col-md-12">
                        <div class="recent center row task-recent">
                            <h3>
                                <center>Tasks completed this past week</center>
                            </h3>
                            <div class="col-md-10 recent-chart" id="task-recent-chart"></div>
                            <div class="task-recent-total col-md-2 recent-total">
                                <h4>@Model.RecentTasksCompletedCount</h4>
                                <h5>Tasks Completed</h5>
                            </div>
                        </div>
                    </div>
                    `
                        <div class="row stats task-stats">
                            <div class="col-md-6 task-stats-complete">
                                <h5>Total Completed</h5>
                                <h4>@Model.TasksCompletedCount</h4>
                            </div>
                            <div class="col-md-6 task-stats-remain">
                                <h5>Total Remaining</h5>
                                <h4>@Model.RemainingTasksCount</h4>
                            </div>
                        </div>
                </div>
            </article>
        </div>
    </section>
    <section class="center content even no-border row">
        <div class="col-md-12">
            <article class="bugs">
                <div class="jumbotron">
                    <h2>
                        <center>Software Bugs</center>
                    </h2>
                    <div class="col-md-8">
                        <div id="bug-burndown" class="burndown"></div>
                    </div>
                    <div class="col-md-4">
                        <div id="bug-progress" class="item-progress"></div>
                    </div>
                    
                        <div class="bug-recent recent row">
                        <div class="col-md-12">
                            <h3><center>Bugs closed this past week</center></h3>
                        </div>
                            <div class="col-md-8 recent-chart" id="bug-recent-chart"></div>
                            <div class="bug-recent-total col-md-4 recent-total">
                                <h4>@Model.RecentBugsCompletedCount</h4>
                                <h5>Bugs Closed</h5>
                            </div>
                </div>

                <div class="bug-stats row stats">
                            <div class="bug-stats-complete col-md-6">
                                <h5>Total Closed</h5>
                                <h4>@Model.BugsCompletedCount</h4>
                            </div>
                            <div class="bug-stats-remain col-md-6">
                                <h5>Total Remaining</h5>
                                <h4>@Model.RemainingBugsCount</h4>
                            </div>
                        </div>
                    </div>
            </article>
        </div>
         <h3 style="text-align:center;">
            Progress Overview
        </h3>
        <p class="description">The overall progress on @Model.Title is determined by both the list of completed tasks and number closed bug tickets. The charts above enumerate our progress on each of these fronts of your project.</p>
    </section>

	<section class="center content row tasks">
        <h2>All Sprints and Associated Stories</h2>

		<div class="carousel slide" data-interval="false" data-ride="carousel" id="task-scroller">
			<div class="carousel-inner">
			@foreach (TrueFitProjectTracker.Models.Dashboard.SprintModel sprint in tasks.list) {
				<div class="@(counter == 0 ? "active " : "")item">
					<header>
						<h3>@sprint.Name</h3>
						@if (!sprint.State.IsEmpty()) { <h4>State: @sprint.State</h4> }

						@if (DateTime.Compare(epoch, sprint.StartDate) != 0) {
						<ul>
							<li><time class="from" datetime="@sprint.StartDate.ToString("yyyy-MM-dd")">@sprint.StartDate.ToString("MMMM dd, yyyy")</time></li>
							
							@if (DateTime.Compare(epoch, sprint.EndDate) != 0) {
							<li>to</li>
							<li><time class="to" datetime="@sprint.EndDate.ToString("yyyy-MM-dd")">@sprint.EndDate.ToString("MMMM dd, yyyy")</time></li>
							}
						</ul>
						}
					</header>

					<div class="sprint-body">
						<div class="row">
							@{
								List<TrueFitProjectTracker.Models.Dashboard.TaskModel> complete = new List<TrueFitProjectTracker.Models.Dashboard.TaskModel>();
								List<TrueFitProjectTracker.Models.Dashboard.TaskModel> later = new List<TrueFitProjectTracker.Models.Dashboard.TaskModel>();
								List<TrueFitProjectTracker.Models.Dashboard.TaskModel> started = new List<TrueFitProjectTracker.Models.Dashboard.TaskModel>();

							//Calculate which tasks have been completed, started, or starting soon
								foreach (TrueFitProjectTracker.Models.Dashboard.TaskModel task in sprint.Tasks) {
									if (task.Percent == 0) {
										later.Add(task);
									} else if (task.Percent == 100) {
										complete.Add(task);
									} else {
										started.Add(task);
									}
								}
							}

							@if (complete.Count > 0) {
							<div class="col-md-4 complete">
								<h5>Complete</h5>

								<ul>
								@foreach (TrueFitProjectTracker.Models.Dashboard.TaskModel task in complete) {
									<li>@task.Name</li>
								}
								</ul>
							</div>
							} else {
							<div class="col-md-4 complete empty">
								<header>
									<h5>No Completed Stories</h5>
									<h6>Check back soon, we're working hard</h6>
								</header>
							</div>
							}

							@if (started.Count > 0) {
							<div class="col-md-4 started">
								<h5>In Progress</h5>

								<ul>
								@foreach (TrueFitProjectTracker.Models.Dashboard.TaskModel task in started) {
									<li>@task.Name</li>
								}
								</ul>
							</div>
							} else {
							<div class="col-md-4 empty started">
								<header>
									<h5>No Active Stories</h5>
									<h6>@(later.Count == 0 ? "We're all done!" : "We'll be starting soon")</h6>
								</header>
							</div>
							}

							@if (later.Count > 0) {
							<div class="col-md-4 later">
								<h5>Starting Soon</h5>

								<ul>
								@foreach (TrueFitProjectTracker.Models.Dashboard.TaskModel task in later) {
									<li>@task.Name</li>
								}
								</ul>
							</div>
							} else {
							<div class="col-md-4 empty later">
								<header>
									<h5>No Pending Stories</h5>
									<h6>That's all folks!</h6>
								</header>
							</div>
							}
						</div>
					</div>
				</div>

				++counter;
			}

			</div>

			<ol class="carousel-indicators">
			@for (int i = 0; i < counter; ++i) {
				<li@(i == 0 ? " class=active" : "") data-slide-to="@i" data-target="#task-scroller"></li>
			}
			</ol>

			<a class="carousel-control left" data-slide="prev" href="#task-scroller">
				<span class="glyphicon glyphicon-chevron-left"></span>
			</a>

			<a class="carousel-control right" data-slide="next" href="#task-scroller">
				<span class="glyphicon glyphicon-chevron-right"></span>
			</a>
		</div>
    </section>

    <section class="bug center content even row">
        <h2>Found a Bug?</h2>
        <p>We're sorry to hear that @Model.Title has caused a problem. To help us better improve your product, please take a moment to let us know about this issue you found.</p>

        <a href="@Url.Action("ReportBug", "Home", Model.Title)" class="btn btn-default btn-lg" role="button">
            <span class="glyphicon glyphicon-warning-sign"></span> Report a Bug
        </a>
    </section>
</section>



@section Scripts {
    <script src="//cdnjs.cloudflare.com/ajax/libs/highcharts/3.0.9/highcharts.js"></script>
    <script>
        $(function () { // task progress pi chart
            var percent = @(Model.TaskProgress);

            $('#task-progress').highcharts({
                chart: {
                    backgroundColor: null,
                    height: 250,
                    spacing: [0, 0, 0, 0],
                    width: 250
                },
                credits: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                plotOptions: {
                    pie: {
                        animation: false,
                        borderWidth: 0,
                        dataLabels: { enabled: false },
                        states: { hover: { enabled: false } }
                    }
                },
                series: [{
                    data: [{
                        color: '#77E38C',
                        y: percent
                    }, {
                        color: '#FFFFFF',
                        y: 100.0 - percent
                    }],
                    innerSize: '80%',
                    type: 'pie'
                }, {
                    data: [{
                        color: '#323A45',
                        y: 100.0
                    }],
                    size: '80%',
                    type: 'pie'
                }],
                title: {
                    align: 'center',
                    text: '<span style="color: #FFFFFF; font-size: 60px;  vertical-align: top;">' + percent + '<span style="color: #AAAAAA; font-size: 24px;">%</span></span>',
                    verticalAlign: 'middle',
                    y: 20
                },
                tooltip: { enabled: false }
            });
        });

        $(function () { // task burndown line chart
            var data = [@string.Join(",", Model.TaskBurndownChart.ToArray())];
            var months = getMonthNamesFromMonthAndYear(
                @Model.BugBurndownStart.Item1 , @Model.BugBurndownStart.Item2 ,
                @Model.BugBurndownEnd.Item1 , @Model.BugBurndownEnd.Item2 );


            $('#task-burndown').highcharts({
                chart: {
                    backgroundColor: '#77E38C',
                    borderRadius: 0,
                    spacing: [40, 10, 40, 10]
                },
                colors: ['#FFFFFF'],
                credits: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                title: {
                    text: null
                },
                xAxis: {
                    categories: months,
                    lineColor: '#000000',
                    tickColor: '#000000',
                },
                yAxis: {
                    gridLineColor: '#000000',
                    gridLineDashStyle: 'LongDash',
                    title: {
                        style: {
                            color: '#FFFFFF'
                        },
                        text: 'Remaining Hours'
                    }
                },
                legend: {
                    enabled: false
                },
                series: [{
                    name: 'Remaining',
                    data: data
                }]
            });
        });

        $(function () { // task completion by day within past week count
            var max = @((int)(Model.TaskRecentChart.Max() + 1));
            var data = [@string.Join(",", Model.TaskRecentChart.ToArray())]; //replace with mvc
            var days = getDayNamesFromDayOfWeek(@((int)DateTime.Now.DayOfWeek));

            $('#task-recent-chart').highcharts({
                chart: {
                    backgroundColor: null,
                    spacing: [0, 0, 0, 0],
                    type: 'column'
                },
                credits: { enabled: false },
                exporting: { enabled: false },
                legend: { enabled: false },
                title: { text: null },
                tooltip: { enabled: false },
                xAxis: {
                    categories: days,
                    gridLineColor: 'transparent',
                    lineWidth: 0,
                    minorGridLineWidth: 0,
                    labels: { style: { 'color': '#999999', 'font-size': '14px' } },
                    tickColor: 'transparent'
                },
                yAxis: {
                    gridLineColor: 'transparent',
                    labels: { enabled: false },
                    lineWidth: 0,
                    minorGridLineWidth: 0,
                    title: { text: null }
                },
                plotOptions: {
                    column: {
                        animation: false,
                        borderColor: 'transparent',
                        borderWidth: 0,
                        stacking: 'normal',
                        states: { hover: { enabled: false } }
                    }
                },
                series: [{
                    color: ['#DDDDDD'],
                    data: function () {
                        var subElements = [];
                        for (var i = 0; i < data.length; i++) {
                            subElements[i] = max - data[i];
                        }
                        return subElements;
                    }()
                }, {
                    color: ['#77E38C'], // top bar
                    data: data
                }]
            });
        });

        //-----------------BUGS-----------------------

        $(function () { // bug progress pi chart
            var percent = @(Model.BugProgress);

            $('#bug-progress').highcharts({
                chart: {
                    backgroundColor: null,
                    height: 250,
                    spacing: [0, 0, 0, 0],
                    width: 250
                },
                credits: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                plotOptions: {
                    pie: {
                        animation: false,
                        borderWidth: 0,
                        dataLabels: { enabled: false },
                        states: { hover: { enabled: false } }
                    }
                },
                series: [{
                    data: [{
                        color: '#00D2FF',
                        y: percent
                    }, {
                        color: '#FFFFFF',
                        y: 100.0 - percent
                    }],
                    innerSize: '80%',
                    type: 'pie'
                }, {
                    data: [{
                        color: '#323A45',
                        y: 100.0
                    }],
                    size: '80%',
                    type: 'pie'
                }],
                title: {
                    align: 'center',
                    text: '<span style="color: #FFFFFF; font-size: 60px;  vertical-align: top;">' + percent + '<span style="color: #AAAAAA; font-size: 24px;">%</span></span>',
                    verticalAlign: 'middle',
                    y: 20
                },
                tooltip: { enabled: false }
            });
        });

        $(function () { // bug burndown line chart
            var data = [@string.Join(",", Model.BugBurndownChart.ToArray())];
            var months = getMonthNamesFromMonthAndYear(
                @Model.BugBurndownStart.Item1 , @Model.BugBurndownStart.Item2 ,
                @Model.BugBurndownEnd.Item1 , @Model.BugBurndownEnd.Item2 );

            $('#bug-burndown').highcharts({
                chart: {
                    backgroundColor: '#00D2FF',
                    borderRadius: 0,
                    spacing: [40, 10, 40, 10]
                },
                colors: ['#FFFFFF'],
                credits: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                title: {
                    text: null
                },
                xAxis: {
                    categories: months,
                    lineColor: '#000000',
                    tickColor: '#000000',
                },
                yAxis: {
                    gridLineColor: '#000000',
                    gridLineDashStyle: 'LongDash',
                    title: {
                        style: {
                            color: '#FFFFFF'
                        },
                        text: 'Remaining Hours'
                    }
                },
                legend: {
                    enabled: false
                },
                series: [{
                    name: 'Remaining',
                    data: data
                }]
            });
        });

        $(function () { // bug bar chart - bugs closed within past week (recent)
            var max = @((int)(Model.BugRecentChart.Max() + 1));
            var data = [@string.Join(",", Model.BugRecentChart.ToArray())]
            var days = getDayNamesFromDayOfWeek(@((int)DateTime.Now.DayOfWeek));

            $('#bug-recent-chart').highcharts({
                chart: {
                    backgroundColor: null,
                    spacing: [0, 0, 0, 0],
                    type: 'column'
                },
                credits: { enabled: false },
                exporting: { enabled: false },
                legend: { enabled: false },
                title: { text: null },
                tooltip: { enabled: false },
                xAxis: {
                    categories: days,
                    gridLineColor: 'transparent',
                    lineWidth: 0,
                    minorGridLineWidth: 0,
                    labels: { style: { 'color': '#999999', 'font-size': '14px' } },
                    tickColor: 'transparent'
                },
                yAxis: {
                    gridLineColor: 'transparent',
                    labels: { enabled: false },
                    lineWidth: 0,
                    minorGridLineWidth: 0,
                    title: { text: null }
                },
                plotOptions: {
                    column: {
                        animation: false,
                        borderColor: 'transparent',
                        borderWidth: 0,
                        stacking: 'normal',
                        states: { hover: { enabled: false } }
                    }
                },
                series: [{
                    color: ['#DDDDDD'],
                    data: function () { // top space fillers
                        var subElements = [];
                        for (var i = 0; i < data.length; i++) {
                            subElements[i] = max - data[i];
                        }
                        return subElements;
                    }()
                }, {
                    color: ['#00D2FF'],
                    data: data
                }]
            });
        });


        // *******functions****************

        function getDayNamesFromDayOfWeek(number) { // 0 is sunday, return ['S', 'M', ...]
            var days = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
            var result = [];
            for (var i = number; i < number + 7; i++) {
                result.push(days[i % 7]);
            }
            return result;
        }

        function getMonthNamesFromMonthAndYear(month, year, monthEnd, yearEnd) {
            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            var result = [];
            while (month <= monthEnd || year <= yearEnd) {
                 // 1st time, put year with month
                if (month == 0 || result.length == 0)
                    result.push(months[month] + ', ' + year.toString()); // 2014
                else
                    result.push(months[month]);
                month++;
                if (month == 12){ month = 0; year++; } // reset
            }
            return result;
        }
    </script>
}
